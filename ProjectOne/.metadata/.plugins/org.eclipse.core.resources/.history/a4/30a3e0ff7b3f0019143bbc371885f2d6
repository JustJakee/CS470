import java.io.IOException;
import java.net.*;
import java.util.ArrayList;

public class PeerToPeer 
{
  public static ArrayList<String> ipList = new ArrayList<>(); //output

  public static void main(String[] args) throws Exception 
  {
	ipList.add("localhost"); //Client 1
	ipList.add("localhost"); //Client 2
	ipList.add("localhost"); //Client 3
	ipList.add("1"); //Client 4
    startServer();
    startSender();
  }

  public static void startSender() throws UnknownHostException
  {
    (new Thread() 
    {
        @Override
        public void run() 
        {
        	
        	byte data[] = "Client Alive".getBytes();
            DatagramSocket socket = null;
            
            try 
            {
                socket = new DatagramSocket();
                socket.setBroadcast(true);
            } 
            catch (SocketException ex) 
            {
                ex.printStackTrace();
            }
            
            while (true)
            {
	        	for (int i = 0; i < ipList.size(); i++) 
	        	{
	        		InetAddress ipAddress;
					try 
					{
						ipAddress = InetAddress.getByName(ipList.get(i));
						if (ipAddress.isReachable(5000))
						{
							String upString = "Client " + i + " up";
				            byte dataUp[] = upString.getBytes();
							DatagramPacket sendPacket = new DatagramPacket(dataUp,data.length,ipAddress,9876);
			                socket.send(sendPacket);
						}
						else
						{
								String downString = "Client " + i + " down";
					            byte dataFail[] = downString.getBytes();
								DatagramPacket sendPacket = new DatagramPacket(dataFail, dataFail.length, InetAddress.getByName(ipList.get(i)), 9876);
								socket.send(sendPacket);
						}
		                
		                Thread.sleep(5000);
					} 
					catch (UnknownHostException e) 
					{
						System.out.println("Client " + j + 1 + " is down.");
					}
					catch (IOException ex) 
	                {
						ex.printStackTrace();
	                }
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
	        	}
            }
        }
        }).start();
    }

  public static void startServer() 
  {
    (new Thread() 
    {
        @Override
        public void run() 
        {
                DatagramSocket serverSocket = null;
                try 
                {
                	serverSocket = new DatagramSocket(9876);
                } 
                catch (SocketException ex) 
                {
                    ex.printStackTrace();
                }
                
                DatagramPacket receivePacket = new DatagramPacket(new byte[1024], 1024);
                while (true) 
                {
                	try 
                	{
                		serverSocket.receive(receivePacket);
	                    String temp = new String(receivePacket.getData());
	                    
	                    System.out.println(temp);
                	} 
                	catch (IOException ex) 
                	{
	                    ex.printStackTrace();
                	}
                }
            }
    }).start();
 }
}